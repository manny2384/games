{"version":3,"sources":["montyImg/logo.jpg","montyImg/img.jpg","monty.js","four-square.js","tic-tac-toe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","door","Pic","Pic2","Math","floor","random","console","log","Monty","props","state","doorImg","wins","plays","switch_wins","switch_plays","win_stats","switch_stats","doorHandler","bind","doorNum","addSwitch","add_switch_Win","noSwitch","no_switch_Win","given_wrong_door","window","confirm","new_door","prompt","doors","document","getElementById","src","this","setState","getElementsByClassName","i","length","className","onClick","e","id","alt","restartHandler","React","Component","availableMoves","board","available_moves","validMove","push","evaluateBoard","hasWon","xStreak","oStreak","col","row","minimax","player","depth","alpha","beta","gameOver","openMoves","symbol","bestVal","bestMove","newBoard","JSON","parse","stringify","selectMinMax","hypoVal","j","arguments","FourSquare","gameboard","player_wins","pc_wins","selectMove","column","value","game_squares","new_board","parseInt","classList","add","alert","pc_move","o_row","move","new_gameboard","reset_squares","remove","game","map","item","index","key","sub_item","sub_index","chooseCol","resetHandler","has_won","moves_available","best_move","best_value","select_Square_minimax","hypotheticalVal","square","round","TicTacToe","turn","pc","selectSquare","chosen_squares","level","decisions","newGame","reset_buttons","that","App","games","show","handleClick","target","Temp","NavBar","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67ec05fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b33be728.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img.4a134fa3.jpg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pic from './montyImg/logo.jpg';\nimport Pic2 from './montyImg/img.jpg';\nconst LosePic = <img className='door_img' alt='Lost' src={Pic}></img>\nconst WinPic = <img className='door_img' alt='Win' src={Pic2}></img>\n\nvar door = Math.floor(Math.random()*3) + 1;\nconsole.log('winning door ', door);\n\nclass Monty extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {doorImg:[null,null,null], wins:0, plays:0, \n            switch_wins:0, switch_plays:0, win_stats:0, switch_stats:0};\n        this.doorHandler = this.doorHandler.bind(this);\n\n    }\n\n    doorHandler(doorNum){\n        var addSwitch = 0;\n        var add_switch_Win = 0;\n        var noSwitch = 1;\n        var no_switch_Win = 0;\n        var given_wrong_door = 0;\n        while(true){\n            given_wrong_door = Math.floor(Math.random() * 3) + 1;\n            if(given_wrong_door !== doorNum && given_wrong_door !== door)\n                break;\n        }\n\n        if(window.confirm(`Tell you what, it's not door ${given_wrong_door} \\n Want to switch? If not, press cancel`)){\n            var new_door = prompt('Enter the door number: 1, 2, or 3 \\n keep same door by entering same door');\n            // new door entered\n            if(new_door && new_door !== doorNum){\n                doorNum = new_door;\n                addSwitch = 1;\n                noSwitch = 0;\n            }\n        }\n        let doors = document.getElementById('img'+doorNum);\n\n        if(doorNum === door){\n            console.log('Win');\n            if(addSwitch) \n                add_switch_Win = 1;\n            else\n                no_switch_Win = 1;\n\n            doors.src = Pic;\n        }\n        else{\n            doors.src=Pic2;\n        }\n\n        this.setState((state)=>{\n            return{\n                switch_plays: addSwitch ? state.switch_plays+1 : state.switch_plays,\n                switch_wins: add_switch_Win ? state.switch_wins+1 : state.switch_wins,\n                switch_stats: (state.switch_wins + add_switch_Win) / (state.switch_plays===0 ? 1:state.switch_plays+addSwitch),\n                plays: noSwitch ? state.plays + 1 : state.plays,\n                wins: no_switch_Win ? state.wins+1 : state.wins,\n                win_stats: (state.wins + no_switch_Win) / (state.plays===0 ? 1:state.plays+noSwitch)\n            }\n        })\n\n    }\n\n    restartHandler(){\n        // generate new winning door\n        door = Math.floor(Math.random() * 3) + 1;\n        console.log('new win ', door);\n\n        // reset doors to blanks\n        let doors = document.getElementsByClassName('door_img');\n        for(let i=0; i<doors.length; i++){\n            doors[i].src = '';\n        }\n    }\n\n    render(){\n\n        return <>\n            <section className='monty_grid'>\n                <button className='monty_door' onClick={(e) => this.doorHandler(1)}>\n                    <img id='img1' className='door_img' alt='ChooseDoor' src=''></img>\n                </button>\n                <button className='monty_door' onClick={(e) => this.doorHandler(2)}>\n                    <img id='img2' className='door_img' alt='ChooseDoor' src=''></img>\n                </button>\n                <button className='monty_door' onClick={(e) => this.doorHandler(3)}>\n                    <img id='img3' className='door_img' alt='ChooseDoor' src='' ></img>\n                </button>\n\n            </section>\n            <section className='monty_stats'>\n                <button onClick={this.restartHandler.bind(this)}>Restart</button>\n                <section>\n                    <div>\n                        <p> Wins: {this.state.wins} </p>\n                        <p> Total Plays: {this.state.plays} </p>\n                        <p> Win Stats: {this.state.win_stats * 100} %</p>\n                    </div>\n                    <div>\n                        <p> Switch Wins: {this.state.switch_wins} </p>\n                        <p> Total Switches: {this.state.switch_plays} </p>\n                        <p> Switch Win Stats: {this.state.switch_stats * 100} %</p>\n                    </div>\n                </section>\n            </section>\n        </>\n    }\n};\n\nexport default Monty;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nlet gameOver = (board) => {\n    if(hasWon(board, 'X') || hasWon(board,'O') || availableMoves(board).length===0){\n        return true;\n    }\n}\n\n// @ params: board to check available columns\n// returns list of available columns\nlet availableMoves = (board) => {\n    let available_moves = [];\n    for(let i=0; i<board[0].length; i++){\n        // check if column is available\n        if(validMove(board, i)){\n            // add column to the available moves list\n            available_moves.push(i)\n        }\n    }\n    return available_moves;\n}\n\nlet evaluateBoard = (board) => {\n    if(hasWon(board,'X'))\n        return 1000;\n    else if(hasWon(board, 'O'))\n        return -1000;\n\n    let xStreak = 0;\n    let oStreak = 0;\n\n    // check streak horizontal\n    for (let col = 0; col < board[0].length; col++){\n        for(let row = 0; row < board.length; row++){\n            if (board[row][col] === 'X' && board[row][col+1] === 'X'){\n                xStreak +=1;\n            }\n            else if(board[row][col] === 'O' && board[row][col+1] === 'O'){\n                oStreak +=1;\n            }\n        }\n    }\n\n\n\n    return xStreak - oStreak;\n}// evaluate\n\nfunction minimax(board, player, depth, alpha, beta){\n    if(gameOver(board) || depth === 0){\n        return [evaluateBoard(board), ''];\n    }\n\n    // get list of available moves\n    let openMoves = availableMoves(board);\n    // set player symbol\n    let symbol = player ? 'X':'O';\n\n    // player is x\n    if(player){\n        let bestVal = -1000;\n        // set best move to a random column\n        let bestMove = openMoves[Math.floor(Math.random() * openMoves.length)];\n        \n        for(let i=0; i<openMoves.length; i++){\n            let newBoard = JSON.parse(JSON.stringify(board));\n            selectMinMax(newBoard, openMoves[i], symbol);\n            let hypoVal = minimax(newBoard, false, depth-1, alpha, beta);\n\n            if(hypoVal[0] > bestVal){\n                bestVal = hypoVal[0];\n                bestMove = openMoves[i];\n            }\n\n            // set alpha to largest of alpha and bestval\n            alpha = alpha > bestVal ? alpha : bestVal;\n\n            if(alpha >= beta)\n                break;\n\n        }\n\n        return [bestVal, bestMove];\n    }\n    // player is o\n    else{\n        let bestVal = 1000;\n        // set best move to a random column\n        let bestMove = openMoves[Math.floor(Math.random() * openMoves.length)];\n        for(let i=0; i<openMoves.length; i++){\n            let newBoard = JSON.parse(JSON.stringify(board));\n            selectMinMax(newBoard, openMoves[i], symbol);\n            let hypoVal = minimax(newBoard, true, depth-1, alpha, beta);\n\n            // check if hypothetical value is smaller than best value: want small for o player\n            if(hypoVal[0] < bestVal){\n                bestVal = hypoVal[0];\n                bestMove = openMoves[i];\n            }\n\n            // set beta to min of beta and bestVal\n            beta = beta < bestVal ? beta : bestVal;\n            if(alpha >= beta)\n                break;\n        }\n\n        return [bestVal, bestMove];\n    }\n}// minimax\n \nfunction hasWon(board, player){\n    // check horizontally, // i iterates rows\n    for(let i=0; i<board.length; i++){\n        // j iterates columns: only need to check 4 spaces\n        for(let j=0; j<4; j++){\n            if(board[i][j] === player && board[i][j+1]===player && board[i][j+2]===player && board[i][j+3]===player)\n            {\n                return true;\n            }\n        }\n\n    }\n\n    // check down, // i iterates rows\n    for(let i=0; board.length-i >= 4; i++){\n        // j iterates columns\n        for(let j=0; j<board[0].length; j++){\n            if(board[i][j]===player && board[i+1][j]===player && board[i+2][j]===player && board[i+3][j]===player)\n            {\n                return true;\n            }\n        }\n\n    }\n\n    // check diagonal: top right -> bottom left: i=row j=col\n    for(let i=0; board.length-i >= 4; i++){\n        for(let j=board[0].length-1; j >= 3; j--){\n            if(board[i][j]===player && board[i+1][j-1]===player && board[i+2][j-2]===player && board[i+3][j-3]===player)\n            {\n                return true;\n            }\n        }\n    }\n\n    // check diagonal: top left -> bottom right: i=row j=col\n    for (let i=0; i<2; i++){\n        for(let j=0; j<4; j++){\n            if(board[i][j]===player && board[i+1][j+1]===player && board[i+2][j+2]===player && board[i+3][j+3]===player)\n            {\n                return true;\n            }\n        }\n    }\n\n    return false\n}// hasWon\n\n \n// @ params: board & column number\n// returns true or false\nlet validMove = (board, col) => {\n  \n   // check if top row of column is available\n   if(board[0][col] !== 'X' && board[0][col] !== 'O')\n       return true;\n   else return false;\n}\n \n \n// @ params: board of player\n// @ params: column selected to play\n// @ params: current player: alternates between ( X & O)\nfunction selectMinMax(board, col, player){\n       // loop through all rows : only checks column selected\n       for(let i = board.length - 1; i >= 0; i -= 1){\n           if(board[i][col] !== 'X' && board[i][col] !== 'O'){\n               board[i][col] = player;\n                if(arguments.length > 3)\n                    return i;\n                else\n                    return true;\n           }\n       }\n\n       return false;\n}\n \n \nclass FourSquare extends React.Component {\n   constructor(props){\n       super(props);\n \n       this.state = {\n           gameboard:[['0','1', '2','3','4','5','6'],['0','1','2','3','4','5','6'],\n           ['0','1','2','3','4','5','6'],['0','1','2','3','4','5','6'],\n           ['0','1','2','3','4','5','6']], symbol:'X', player_wins:0, pc_wins:0\n       }\n \n       this.selectMove = this.selectMove.bind(this);\n   }\n \n \n   // event handler for user column choice in game\n   // @ params col defines column to implement chip\n   // fctn will initiate a minimax to produce best choice for computer\n   // assumes player value to X and pc to O\n   selectMove(column){\n        // set level \n        let depth = document.getElementById('connect_4level').value;\n        if(depth === 'Medium')\n            depth = 5;\n        else if(depth === 'Hard')\n            depth = 8;\n        else depth = 3;\n       \n       // used to set color according to player\n       let game_squares = document.getElementsByClassName('row-item');\n        console.log(game_squares.length);\n       // loop through all rows : only checks column selected\n       for(let i = this.state.gameboard.length - 1; i >= 0; i -= 1){\n           if(this.state.gameboard[i][column] !== 'X' && this.state.gameboard[i][column] !== 'O'){\n\n               let new_board = JSON.parse(JSON.stringify(this.state.gameboard));\n               new_board[i][column] = this.state.symbol;\n\n                // add x square color\n                game_squares[(i*7) + parseInt(column)].classList.add('xSquare');\n\n               // check if there is winner in new board\n               if(hasWon(new_board, this.state.symbol)){\n                   alert(' Winner: ', this.state.symbol);\n                   this.setState((state)=>{\n                       return {player_wins: state.player_wins+1}\n                   })\n                   return;\n               }\n               else{\n\n                    // retrieve pc move from minimax decision\n                    // starting parameters are updated board from player x, false: O, depth, alpha, beta\n                    let pc_move = minimax(JSON.parse(JSON.stringify(new_board)), false, depth, -1000, 1000);\n                    console.log('************ pc move', pc_move);\n                    let o_row = selectMinMax(new_board, pc_move[1], 'O', 1);\n                    // add x square color\n                    game_squares[(o_row*7) + pc_move[1]].classList.add('oSquare');\n\n                    this.setState(() => {\n                        return {gameboard : new_board}\n                    });\n\n                    if(hasWon(new_board, 'O')){\n                        alert(' Winner: O');\n                        this.setState((state)=>{\n                            return {pc_wins: state.pc_wins+1}\n                        })\n                    }\n               }\n               return true;\n           }\n       }\n\n       return false;\n   }\n \n   // handler for setting move\n   setMove(){\n      \n       this.setState(()=>{\n          return {move: document.getElementById('col').value}\n       }, ()=>{\n           console.log('changing move state ', this.state.move);\n \n       });\n \n       console.log('done');\n   }\n \n   resetHandler(){\n       let new_gameboard = [['0','1', '2','3','4','5','6'],['0','1','2','3','4','5','6'],\n       ['0','1','2','3','4','5','6'],['0','1','2','3','4','5','6'],\n       ['0','1','2','3','4','5','6']];\n\n       let reset_squares = document.getElementsByClassName('row-item');\n       for(let i=0; i<reset_squares.length; i++){\n           reset_squares[i].classList.remove('oSquare');\n           reset_squares[i].classList.remove('xSquare');\n       }\n\n       this.setState(()=>{\n           return {gameboard: new_gameboard}\n       })\n   }\n\n   render(){\n       let that = this;\n       let game = that.state.gameboard.map((item, index) => {\n           return <section className='game-row' key={index}> {item.map((sub_item, sub_index) => {\n               return <div className='row-item' key={sub_index}> {sub_item} </div>\n           })}\n           </section>\n       });\n \n       // button event handler fctn: selectMove(col)\n       let chooseCol = this.state.gameboard[0].map((item,index)=>{\n           return <button id='chooseBtn' key={index} onClick={(e)=>this.selectMove(index, e)}>\n               Choose Column: {index} </button>\n       })\n\n \n       return <section className='connect4_grid'>\n            <section className='four-sqrBoard'> \n                {game} <br />\n                <div className='game-row'>{chooseCol}</div>\n            </section>\n            \n            <section className='connect_4_stats'>\n                <button onClick={this.resetHandler.bind(this)}> Reset </button>\n                <select id='connect_4level'>\n                    <option>Easy</option>\n                    <option>Medium</option>\n                    <option>Hard</option>\n                </select>\n                <div>\n                    <p> Pc Wins: {this.state.pc_wins} </p>\n                    <p> Player Wins: {this.state.player_wins} </p>\n                </div>\n            </section>\n        </section>;\n   }\n};\n \nexport default FourSquare;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//@ params: board, current player\n// checks if there is a winner by comparing all possible wins in board\n// returns true if ^, false otherwise\nlet has_won = (board, player) =>{\n    for(let i=0; i<3; i++){\n        if(board[0][i]===player && board[1][i]===player && board[2][i]===player)\n            return true;\n        else if(board[i][0]===player && board[i][1]===player && board[i][2]===player)\n            return true;\n        \n    }\n    \n    if(board[0][0]===player && board[1][1]===player && board[2][2]===player)\n        return true;\n    else if(board[2][0]===player && board[1][1]===player && board[0][2]===player)\n        return true;\n   \n    return false;\n}\n   // performs minimax decision making: recursive\n    // @ params board = recursive board\n    // @ player = current player: switches on each recursion\nfunction minimax(board, player, depth){\n        if(gameOver(board) || depth === 0){\n            return [evaluateBoard(board), ''];\n        }\n\n        // performs oscillates player to perform best calcution of turn\n\n        let best_move;\n        if(player){\n            var best_value = -1000;\n            var symbol = 'X';\n        } \n        else{\n            var best_value = 1000;\n            var symbol = 'O';\n        }\n        // get available moves list\n        let availableMoves = moves_available(board);\n\n        \n        for(let i=0; i<availableMoves.length; i++){\n            // new deep copy of board\n            let new_board = JSON.parse(JSON.stringify(board));\n\n            select_Square_minimax(new_board, availableMoves[i], symbol);\n            // recurse with opposing player turn\n            let hypotheticalVal = minimax(new_board, !player, depth-1)[0];\n            // checks comparison on x-player\n            if(player && hypotheticalVal > best_value){\n                best_value = hypotheticalVal;\n                best_move = availableMoves[i];\n            }\n            // checks comparison on o-player\n            else if(!player && hypotheticalVal < best_value){\n                best_value = hypotheticalVal;\n                best_move = availableMoves[i];\n            }\n            \n        }\n\n\n        // return list of best move and value\n        return [best_value,best_move];\n    }\n\n// @ params board\n// returns value of 1, -1, or 0 \n// depending on whether x, o, or tie is foreseen\nfunction evaluateBoard(board){\n        if(has_won(board, \"X\")){\n            return 1;\n        }\n        else if(has_won(board, \"O\")){\n            return -1;\n        }\n        else return 0;\n}\n\n// @ params board, player\n// performs selection on board depending on player\n// function does not set state, only for calculating minimax decision\nfunction select_Square_minimax(board, square, player){\n        // set gameboard to user's decision square\n        let row = Math.round((square - 1) / 3.0);\n        let col = square % 3;\n\n        if(board[row][col] !== \"X\" && board[row][col] !== \"O\"){\n            board[row][col] = player; // setting board with users value\n            return true;\n        }else \n            return false;\n}\n\n// @ params: board = game\n// checks available moves in current board\n// returns list of available moves\nfunction moves_available(board){\n        let available_moves = [];\n        for (let i=0; i<3; i++){\n            for(let j=0; j<3; j++){\n                if(board[i][j] !== 'X' && board[i][j] !== 'O')\n                    available_moves.push(board[i][j]);\n            }\n        }\n\n        return available_moves;\n}\n\nfunction gameOver(board){\n        // game over if winner found or no moves available\n        if(moves_available(board).length === 0 || has_won(board, \"X\") || has_won(board, \"O\")){\n            return true;\n        }\n        else return false;\n}\n\nclass TicTacToe extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            game : [['0','1','2'],['3','4','5'],['6','7','8']],\n            turn : true, pc : \"O\", pc_wins:0, player_wins:0\n        }\n        this.selectSquare = this.selectSquare.bind(this);\n    }\n\n    // strictly for user selection only\n    selectSquare(square){\n        let chosen_squares = document.getElementsByClassName('ticBtns');\n        // make a deep copy of the current state game board\n        let new_board = JSON.parse(JSON.stringify(this.state.game));\n        \n        // set users decisionsquare\n        let row = Math.round((square - 1) / 3.0);\n        let col = square % 3;\n        new_board[row][col] = 'X'; // setting board with users value\n        chosen_squares[square].classList.add('xSquare');\n        // check if user has won the game\n        if(has_won(new_board, 'X')){\n            alert(\"Player X has won the game\");\n            this.setState((state)=>{\n                return {game: JSON.parse(JSON.stringify(new_board)),\n                player_wins:state.player_wins+1}\n            });\n            return;\n        }\n\n        // set level of game\n        let level = document.getElementById('tic_tac_level').value;\n        let depth = 3;\n        if(level === 'Hard')\n            depth = 9;\n        else if(level === 'Medium')\n            depth = 6;\n\n        if(moves_available(this.state.game).length > 1){\n            // begin minimax decision making based on player 0 going next\n            let decisions = minimax(JSON.parse(JSON.stringify(new_board)), false, depth);\n            console.log('**************** Returned minimax decisions ', decisions);\n\n            // set gameboard to pc's decision\n            row = Math.round((decisions[1] - 1) / 3.0);\n            col = parseInt(decisions[1], 10) % 3;\n            new_board[row][col] = 'O'; // setting board with users value\n            chosen_squares[decisions[1]].classList.add('oSquare');\n\n    \n            // check if pc won\n            if(has_won(new_board, \"O\")){\n                alert(\"Player O has won\");\n                this.setState((state)=>{\n                    return {game: JSON.parse(JSON.stringify(new_board)),\n                    pc_wins:state.pc_wins+1}\n                });\n                return;\n            }\n\n            // update game state board for player o\n            else{\n                this.setState((state)=>{\n                    return {game: JSON.parse(JSON.stringify(new_board))}\n                });\n            }\n        }\n    }\n\n    restartHandler(){\n        let newGame = [['0','1','2'],['3','4','5'],['6','7','8']];\n        let reset_buttons = document.getElementsByClassName('ticBtns');\n        for(let i=0; i<9; i++){\n            reset_buttons[i].classList.remove('xSquare');\n            reset_buttons[i].classList.remove('oSquare');\n        }\n\n        this.setState(()=>{\n            return {game: newGame}\n        })\n    }\n\n    render(){\n\n        // values of the game\n        let that = this;\n        let game = that.state.game.map((item, i) => {\n            return item.map((square, index) => {\n                return (<button key={(index+1) * (i+1)} className='ticBtns' onClick={(e)=>that.selectSquare(square, e)}> {square} </button>);\n            })\n        });\n\n        return <> \n\n        <section className='main_Tac_grid' >\n            <section className='tac_game' > {game} </section>\n        </section>\n        <section className='tic_tac_stats'>\n            <button onClick={this.restartHandler.bind(this)}> Restart </button>\n            <select id='tic_tac_level'>\n                <option>Easy</option>\n                <option>Medium</option>\n                <option>Hard</option>\n            </select>\n            <div>\n                <p> PC: {this.state.pc_wins}</p>\n                <p> Player: {this.state.player_wins}</p>\n            </div>\n        </section>\n        </>;\n    }\n};\n\nexport default TicTacToe;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Monty from './monty.js';\nimport FourSquare from './four-square.js';\nimport TicTacToe from './tic-tac-toe.js';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            games:['TicTacToe', 'Four-Square', 'Monty Hall'],\n            show: <> </>\n        }\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(target) {\n        console.log('clicked button ', target);\n        let Temp;\n        switch(target){\n            case \"TicTacToe\":\n                Temp = <TicTacToe />\n                break;\n            case \"Four-Square\":\n                Temp = <FourSquare />\n                break;\n            case \"Monty Hall\":\n                Temp = <Monty />\n                break;\n            default:\n                Temp = <> </>;\n                break;\n        }\n\n        this.setState(() => {\n           return {show: Temp}\n        });\n    }\n\n    render(){\n        \n        let that = this;\n        let NavBar = this.state.games.map((item, index) => {\n            return <li key={item} >\n                <button onClick={(e) => this.handleClick(item, e)}>\n                    {item}\n                </button>\n            </li>\n        })\n\n        \n        return (<> \n        <section className='navbar'> <ul> {NavBar} </ul> </section> \n        <section> {this.state.show} </section> \n        </>);\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('App'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}